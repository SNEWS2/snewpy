# Workflow that installs SNOwGLoBES and runs an integration test

name: Integration Tests

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [review_requested, ready_for_review]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      # Add a list of python versions we want to use for testing.
      matrix:
        python-version: ['3.9']

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Caching requirements
        uses: actions/cache@v2
        id:   cache_pip
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        if: steps.cache_pip.output.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Caching GLoBES
        uses: actions/cache@v2
        id: cache_globes
        with:
          path: |
            ${GITHUB_WORKSPACE}/opt/globes-3.2.17-install
          key: ${{ runner.os }}-globes

      - name: Check latest SNOwGLoBES tag
        id: snowglobes_tag
        run: |
          tag=$(git ls-remote --sort='version:refname' --tags --refs https://github.com/SNOwGLoBES/snowglobes.git | tail -1 | cut -d'/' -f3)
          echo '::set-output name=latest::${tag}'

      - name: Caching SNOwGLoBES
        uses: actions/cache@v2
        id: cache_snowglobes
        with:
          path: |
            ${GITHUB_WORKSPACE}/opt/globes-3.2.17-install
            ${GITHUB_WORKSPACE}/opt/snowglobes
          key: ${{ runner.os }}-snowglobes-${{ steps.snowglobes_tag.output.latest }}
      - name: Install GLoBES
        if: steps.cache_globes.outputs.cache-hit != 'true'
        run: |
          mkdir opt
          cd opt
          wget https://www.mpi-hd.mpg.de/personalhomes/globes/download/globes-3.2.17.tar.gz
          tar -zxf globes-3.2.17.tar.gz
          cd globes-3.2.17/
          ./configure --prefix=$GITHUB_WORKSPACE/opt/globes-3.2.17-install  --disable-binary
          make
          make install

      - name: Install SNOwGLoBES
        if: steps.cache_snowglobes.outputs.cache-hit != 'true'
        run: |
          export GLB_DIR=${GITHUB_WORKSPACE}/opt/globes-3.2.17-install
          # Install SNOwGLoBES
          cd ${GITHUB_WORKSPACE}/opt/
          git clone https://github.com/SNOwGLoBES/snowglobes.git
          cd snowglobes
          export SNOWGLOBES=${PWD}
          cd src
          make
          make install

      - name: Install SNEWPY
        run: |
          python setup.py install --user

      - name: Run Integration Test
        run: |
          python -m unittest python/snewpy/test/snowglobes_integrationtest.py
